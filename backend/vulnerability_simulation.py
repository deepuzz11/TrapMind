import random

# Simulate a variety of vulnerabilities
def simulate_vulnerability():
    vulnerabilities = [
        "SQL Injection",  # Attackers inject malicious SQL queries to manipulate the database
        "Cross-Site Scripting (XSS)",  # Injecting malicious scripts into web pages
        "Buffer Overflow",  # Writing more data to a buffer than it can handle
        "Command Injection",  # Attacker injects system commands through vulnerable inputs
        "File Inclusion",  # Malicious file inclusion that may lead to remote code execution
        "Privilege Escalation",  # Gaining elevated privileges in the system
        "Directory Traversal",  # Accessing files and directories outside of the intended folder
        "Insecure Deserialization",  # Manipulating objects during deserialization
        "Cross-Site Request Forgery (CSRF)",  # Tricking users into performing actions on their behalf
        "XML External Entity (XXE)",  # Exploiting XML parsers to disclose files or conduct SSRF attacks
        "Race Condition",  # Exploiting a flaw in the timing of two concurrent operations
        "Denial of Service (DoS)",  # Overloading the system to deny service
        "Man-in-the-Middle Attack",  # Intercepting and altering communication between two parties
        "Session Fixation",  # Attacker forces a victim to use a specific session ID
        "Unrestricted File Upload",  # Uploading malicious files that could be executed on the server
        "Weak Passwords",  # Exploiting weak or easily guessed passwords
        "API Vulnerability (e.g., insecure endpoints)",  # Insecure APIs that expose sensitive data or allow unauthorized access
        "LDAP Injection",  # Manipulating LDAP queries to gain unauthorized access or modify directory data
        "Open Redirect",  # Redirecting users to a malicious website through unvalidated user input
        "Insufficient Logging & Monitoring",  # Lack of detection and alerts for suspicious activities
        "Misconfigured Security Headers",  # Missing or incorrectly configured HTTP security headers
        "Broken Authentication",  # Exploiting weaknesses in authentication mechanisms
        "Clickjacking",  # Deceiving users into clicking on something different from what they perceive
        "Broken Access Control",  # Insufficient restrictions on what authenticated users can access
        "Sensitive Data Exposure",  # Exposing sensitive data due to weak encryption or insecure storage
        "Unvalidated Redirects and Forwards",  # Exploiting unvalidated redirects to a malicious site
    ]
    
    selected_vulnerability = random.choice(vulnerabilities)
    return selected_vulnerability
